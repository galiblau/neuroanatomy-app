<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>אפליקציית נוירואנטומיה אינטראקטיבית</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 350px;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            padding: 20px;
            overflow-y: auto;
            border-left: 2px solid rgba(255, 255, 255, 0.1);
        }

        .main-viewer {
            flex: 1;
            position: relative;
            display: flex;
            flex-direction: column;
        }

        .controls {
            padding: 20px;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .control-group label {
            font-weight: bold;
            font-size: 14px;
        }

        select, button, input[type="file"] {
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        select:hover, button:hover {
            background: #fff;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        #viewer-container {
            flex: 1;
            position: relative;
            background: radial-gradient(circle, #1a1a2e 0%, #16213e 100%);
        }

        .info-card {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .info-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }

        .info-card h3 {
            color: #4CAF50;
            margin-bottom: 15px;
            font-size: 18px;
            border-bottom: 2px solid #4CAF50;
            padding-bottom: 5px;
        }

        .info-card h4 {
            color: #FFC107;
            margin: 15px 0 10px 0;
            font-size: 16px;
        }

        .info-card p, .info-card li {
            line-height: 1.6;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .info-card ul {
            padding-right: 20px;
        }

        .hidden-input {
            display: none;
        }

        .upload-btn {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
        }

        .upload-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
        }

        .slice-controls {
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .slice-controls h4 {
            margin-bottom: 10px;
            color: #FFC107;
        }

        .slice-control {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .slice-control input[type="range"] {
            flex: 1;
        }

        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #4CAF50;
            font-size: 18px;
        }

        .spinner {
            border: 4px solid rgba(76, 175, 80, 0.3);
            border-top: 4px solid #4CAF50;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .instruction-card {
            background: linear-gradient(135deg, rgba(76, 175, 80, 0.2), rgba(76, 175, 80, 0.1));
            border: 1px solid rgba(76, 175, 80, 0.3);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .instruction-card h3 {
            color: #4CAF50;
            margin-bottom: 10px;
        }

        canvas {
            cursor: crosshair;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-viewer">
            <div class="controls">
                <div class="control-group">
                    <label>סוג תצוגה:</label>
                    <select id="viewMode">
                        <option value="3d">תלת-מימד</option>
                        <option value="sagittal">חתך סגיטלי</option>
                        <option value="coronal">חתך קורונלי</option>
                        <option value="axial">חתך אקסיאלי</option>
                    </select>
                </div>

                <div class="control-group">
                    <button class="upload-btn" onclick="document.getElementById('imageUpload').click()">
                        העלה תמונת MRI
                    </button>
                    <input type="file" id="imageUpload" class="hidden-input" accept="image/*">
                </div>

                <div class="control-group">
                    <button onclick="resetView()">איפוס תצוגה</button>
                    <button onclick="toggleAnimation()">הפסק/התחל סיבוב</button>
                </div>
            </div>

            <div id="viewer-container">
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <div>טוען מודל תלת-מימדי של המוח...</div>
                </div>
            </div>
        </div>

        <div class="sidebar">
            <div class="instruction-card">
                <h3>הוראות שימוש</h3>
                <p><strong>לחץ</strong> על אזור במוח לקבלת מידע מפורט</p>
                <p><strong>גרור</strong> לסיבוב המודל תלת-המימדי</p>
                <p><strong>גלגל עכבר</strong> לזום פנימה/החוצה</p>
                <p><strong>שנה מצב תצוגה</strong> לחתכים שונים</p>
            </div>

            <div class="slice-controls" id="sliceControls" style="display: none;">
                <h4>בקרות חתך</h4>
                <div class="slice-control">
                    <label>עומק החתך:</label>
                    <input type="range" id="sliceDepth" min="0" max="100" value="50">
                    <span id="sliceValue">50</span>
                </div>
            </div>

            <div id="regionInfo">
                <div class="info-card">
                    <h3>ברוכים הבאים לאפליקציית הנוירואנטומיה</h3>
                    <p>אפליקציה זו מאפשרת לכם לחקור את המוח האנושי בצורה אינטראקטיבית.</p>

                    <h4>תכונות עיקריות:</h4>
                    <ul>
                        <li>מודל תלת-מיממדי אינטראקטיבי של המוח</li>
                        <li>זיהוי אזורים אנטומיים בלחיצה</li>
                        <li>תצוגת חתכים בכל הכיוונים</li>
                        <li>העלאת תמונות MRI אישיות</li>
                        <li>מידע על תפקודים ופגיעות</li>
                    </ul>

                    <h4>איך להתחיל:</h4>
                    <p>לחצו על כל אזור במוח כדי לקבל מידע מפורט עליו. השתמשו בבקרות העליונות כדי לשנות את מצב התצוגה או להעלות תמונות אישיות.</p>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Global variables
        let scene, camera, renderer, brain, raycaster, mouse;
        let isAnimating = true;
        let currentViewMode = '3d';
        let brainRegions = [];
        let controls; // For OrbitControls

        // Brain anatomy data
        const brainAnatomyData = {
            'frontal_cortex': {
                name: 'קליפת המוח המצחית',
                functions: [
                    'תכנון וקבלת החלטות',
                    'בקרה על תנועות וולונטריות',
                    'אישיות ושיפוט'
                ],
                damage: [
                    'שינויים באישיות',
                    'קושי בקבלת החלטות'
                ],
                tips: [
                    'פעילות גופנית סדירה',
                    'פתרון חידות ומשחקי חשיבה',
                    'תזונה עשירה בנוגדי חמצון'
                ],
                color: '#FF6B6B'
            },
            'parietal_cortex': {
                name: 'קליפת המוח הפריאטלית',
                functions: [
                    'עיבוד מידע חושי (מגע, כאב, טמפרטורה)',
                    'תפיסה מרחבית'
                ],
                damage: [
                    'קושי בתפיסה מרחבית',
                    'התעלמות מצד אחד של הגוף'
                ],
                tips: [
                    'למידת שפות חדשות',
                    'נגינה בכלי נגינה',
                    'התמצאות במרחב'
                ],
                color: '#4ECDC4'
            },
            'temporal_cortex': {
                name: 'קליפת המוח הרקתית',
                functions: [
                    'עיבוד שמיעה',
                    'זיכרון לטווח ארוך',
                    'הבנת שפה'
                ],
                damage: [
                    'אובדן שמיעה',
                    'בעיות זיכרון',
                    'קושי בהבנת שפה'
                ],
                tips: [
                    'שינה מספקת',
                    'קריאה וכתיבה',
                    'לימוד מיומנויות חדשות'
                ],
                color: '#45B7D1'
            },
            'occipital_cortex': {
                name: 'קליפת המוח העורפית',
                functions: [
                    'עיבוד ראייה',
                    'זיהוי צורות וצבעים'
                ],
                damage: [
                    'עיוורון חלקי או מלא',
                    'קושי בזיהוי צבעים'
                ],
                tips: [
                    'פעילות גופנית המשפרת זרימת דם למוח',
                    'תזונה עשירה בויטמינים C ו-E',
                    'הגנה על העיניים'
                ],
                color: '#96CEB4'
            },
            'cerebellum': {
                name: 'המוחון',
                functions: [
                    'איזון וקואורדינציה',
                    'בקרה על תנועות דקות'
                ],
                damage: [
                    'אובדן איזון',
                    'רעד בתנועות'
                ],
                tips: [
                    'תרגול יוגה או טאי צ\'י',
                    'פעילויות הדורשות קואורדינציה (ריקוד, ספורט)'
                ],
                color: '#FECA57'
            },
            'brainstem': {
                name: 'גזע המוח',
                functions: [
                    'בקרה על נשימה, קצב לב, לחץ דם',
                    'מחזור שינה-ערות'
                ],
                damage: [
                    'בעיות נשימה',
                    'הפרעות קצב לב',
                    'אובדן הכרה'
                ],
                tips: [
                    'הפחתת מתח',
                    'שינה איכותית',
                    'הימנעות מעישון ואלכוהול מופרז'
                ],
                color: '#FF7675'
            }
        };

        // Initialize the application
        function init() {
            setupScene();
            createBrainModel();
            setupEventListeners();
            animate();

            // Hide loading after initialization
            setTimeout(() => {
                document.getElementById('loading').style.display = 'none';
            }, 2000);
        }

        function setupScene() {
            // Scene setup
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x1a1a2e);

            // Camera setup
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 0, 5);

            // Renderer setup
            const container = document.getElementById('viewer-container');
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            container.appendChild(renderer.domElement);

            // Lighting
            const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(10, 10, 5);
            directionalLight.castShadow = true;
            scene.add(directionalLight);

            // Raycaster for mouse interaction
            raycaster = new THREE.Raycaster();
            mouse = new THREE.Vector2();
        }

        function createBrainModel() {
            brain = new THREE.Group();
            // Create brain texture using canvas
            const brainTexture = createBrainTexture();

            // Frontal Lobe (left and right)
            const frontalGeometry = createLobeGeometry([1.0, 0.8, 1.2]);
            const frontalMaterial = createBrainMaterial(brainTexture, 'frontal_cortex');
            const frontalLobeLeft = new THREE.Mesh(frontalGeometry, frontalMaterial);
            frontalLobeLeft.position.set(-0.6, 0.4, 0.8);
            frontalLobeLeft.userData = { regionName: 'frontal_cortex' };
            brain.add(frontalLobeLeft);
            brainRegions.push(frontalLobeLeft);

            const frontalLobeRight = new THREE.Mesh(frontalGeometry, frontalMaterial);
            frontalLobeRight.position.set(0.6, 0.4, 0.8);
            frontalLobeRight.userData = { regionName: 'frontal_cortex' };
            brain.add(frontalLobeRight);
            brainRegions.push(frontalLobeRight);

            // Parietal Lobe (left and right)
            const parietalGeometry = createLobeGeometry([0.9, 0.7, 1.0]);
            const parietalMaterial = createBrainMaterial(brainTexture, 'parietal_cortex');
            const parietalLobeLeft = new THREE.Mesh(parietalGeometry, parietalMaterial);
            parietalLobeLeft.position.set(-0.5, 0.8, -0.2);
            parietalLobeLeft.userData = { regionName: 'parietal_cortex' };
            brain.add(parietalLobeLeft);
            brainRegions.push(parietalLobeLeft);

            const parietalLobeRight = new THREE.Mesh(parietalGeometry, parietalMaterial);
            parietalLobeRight.position.set(0.5, 0.8, -0.2);
            parietalLobeRight.userData = { regionName: 'parietal_cortex' };
            brain.add(parietalLobeRight);
            brainRegions.push(parietalLobeRight);

            // Temporal Lobe (left and right)
            const temporalGeometry = createLobeGeometry([0.8, 0.6, 0.9]);
            const temporalMaterial = createBrainMaterial(brainTexture, 'temporal_cortex');
            const temporalLobeLeft = new THREE.Mesh(temporalGeometry, temporalMaterial);
            temporalLobeLeft.position.set(-1.0, -0.2, 0.2);
            temporalLobeLeft.rotation.z = 0.3;
            temporalLobeLeft.userData = { regionName: 'temporal_cortex' };
            brain.add(temporalLobeLeft);
            brainRegions.push(temporalLobeLeft);

            const temporalLobeRight = new THREE.Mesh(temporalGeometry, temporalMaterial);
            temporalLobeRight.position.set(1.0, -0.2, 0.2);
            temporalLobeRight.rotation.z = -0.3;
            temporalLobeRight.userData = { regionName: 'temporal_cortex' };
            brain.add(temporalLobeRight);
            brainRegions.push(temporalLobeRight);

            // Occipital Lobe (left and right)
            const occipitalGeometry = createLobeGeometry([0.7, 0.8, 0.7]);
            const occipitalMaterial = createBrainMaterial(brainTexture, 'occipital_cortex');
            const occipitalLobeLeft = new THREE.Mesh(occipitalGeometry, occipitalMaterial);
            occipitalLobeLeft.position.set(-0.3, 0.3, -1.2);
            occipitalLobeLeft.userData = { regionName: 'occipital_cortex' };
            brain.add(occipitalLobeLeft);
            brainRegions.push(occipitalLobeLeft);

            const occipitalLobeRight = new THREE.Mesh(occipitalGeometry, occipitalMaterial);
            occipitalLobeRight.position.set(0.3, 0.3, -1.2);
            occipitalLobeRight.userData = { regionName: 'occipital_cortex' };
            brain.add(occipitalLobeRight);
            brainRegions.push(occipitalLobeRight);

            // Cerebellum
            const cerebellumGeometry = new THREE.SphereGeometry(0.7, 32, 32);
            cerebellumGeometry.scale(1.2, 0.7, 1.0); // Make it flatter and wider
            const cerebellumMaterial = createBrainMaterial(brainTexture, 'cerebellum');
            const cerebellum = new THREE.Mesh(cerebellumGeometry, cerebellumMaterial);
            cerebellum.position.set(0, -0.8, -0.8);
            cerebellum.userData = { regionName: 'cerebellum' };
            brain.add(cerebellum);
            brainRegions.push(cerebellum);

            // Brainstem
            const brainstemGeometry = new THREE.CylinderGeometry(0.2, 0.2, 1.0, 16);
            const brainstemMaterial = createBrainMaterial(brainTexture, 'brainstem');
            const brainstem = new THREE.Mesh(brainstemGeometry, brainstemMaterial);
            brainstem.position.set(0, -0.3, 0);
            brainstem.userData = { regionName: 'brainstem' };
            brain.add(brainstem);
            brainRegions.push(brainstem);

            scene.add(brain);
        }

        function createLobeGeometry(dimensions) {
            const geometry = new THREE.SphereGeometry(0.5, 32, 32);
            const vertices = geometry.attributes.position.array;
            for (let i = 0; i < vertices.length; i += 3) {
                vertices[i] *= dimensions[0];
                vertices[i + 1] *= dimensions[1];
                vertices[i + 2] *= dimensions[2];
            }
            geometry.attributes.position.needsUpdate = true;
            geometry.computeVertexNormals();
            return geometry;
        }

        function createBrainMaterial(texture, regionName) {
            return new THREE.MeshPhongMaterial({
                map: texture,
                color: brainAnatomyData[regionName].color,
                transparent: true,
                opacity: 0.8,
                shininess: 20
            });
        }

        function createBrainTexture() {
            const canvas = document.createElement('canvas');
            canvas.width = 256;
            canvas.height = 256;
            const ctx = canvas.getContext('2d');
            // Create brain-like texture
            const gradient = ctx.createLinearGradient(0, 0, 256, 256);
            gradient.addColorStop(0, '#f0f0f0');
            gradient.addColorStop(0.5, '#e0e0e0');
            gradient.addColorStop(1, '#c0c0c0');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, 256, 256);
            // Add some lines to simulate gyri/sulci
            ctx.strokeStyle = '#b0b0b0';
            ctx.lineWidth = 1;
            for (let i = 0; i < 50; i++) {
                ctx.beginPath();
                ctx.moveTo(Math.random() * 256, Math.random() * 256);
                ctx.lineTo(Math.random() * 256, Math.random() * 256);
                ctx.stroke();
            }
            return new THREE.CanvasTexture(canvas);
        }

        function setupEventListeners() {
            // Window resize
            window.addEventListener('resize', onWindowResize);
            // Mouse events
            renderer.domElement.addEventListener('click', onMouseClick);
            renderer.domElement.addEventListener('mousemove', onMouseMove);
            // Controls
            document.getElementById('viewMode').addEventListener('change', onViewModeChange);
            document.getElementById('imageUpload').addEventListener('change', onImageUpload);
            document.getElementById('sliceDepth').addEventListener('input', onSliceDepthChange);
        }

        function onWindowResize() {
            const container = document.getElementById('viewer-container');
            camera.aspect = container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(container.clientWidth, container.clientHeight);
        }

        function onMouseClick(event) {
            const container = document.getElementById('viewer-container');
            const rect = container.getBoundingClientRect();

            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObjects(brainRegions, true); // True to check descendants
            if (intersects.length > 0) {
                // Find the first intersected object that has a regionName userData
                let selectedObject = intersects[0].object;
                while (selectedObject && !selectedObject.userData.regionName) {
                    selectedObject = selectedObject.parent;
                }
                if (selectedObject && selectedObject.userData.regionName) {
                    const selectedRegion = selectedObject.userData.regionName;
                    displayRegionInfo(selectedRegion);
                    highlightRegion(selectedObject);
                }
            }
        }

        function onMouseMove(event) {
            if (currentViewMode === '3d' && event.buttons === 1) { // Check if left mouse button is pressed
                const deltaX = event.movementX * 0.01;
                const deltaY = event.movementY * 0.01;

                // Rotate the entire brain group, not just individual components
                brain.rotation.y += deltaX;
                brain.rotation.x += deltaY;
            }
        }

        function onViewModeChange(event) {
            currentViewMode = event.target.value;
            const sliceControls = document.getElementById('sliceControls');

            // Reset camera position and brain rotation
            camera.position.set(0, 0, 5);
            camera.lookAt(0, 0, 0);
            brain.rotation.set(0, 0, 0); // Crucial for slice views to work consistently

            // Stop animation when changing view mode
            isAnimating = false;
            // Update button text accordingly
            const toggleButton = document.querySelector('.control-group button:last-child');
            if (toggleButton) {
                toggleButton.textContent = 'התחל סיבוב';
            }

            if (currentViewMode === '3d') {
                sliceControls.style.display = 'none';
                // ודא שכל האזורים שוב שקופים לחלוטין (לאחר חתך)
                brainRegions.forEach(region => {
                    // הגדר במפורש את רמת השקיפות המלאה לתצוגת תלת-מימד
                    region.material.opacity = 0.8; // רמת השקיפות הסטנדרטית למוח בתלת-מימד
                    // ודא גם שהמאפיין transparent מוגדר ל-true (חיוני לשקיפות)
                    region.material.transparent = true;
                    // בנוסף, נאפס גם את ההדגשה והגודל אם היו כאלה
                    region.material.emissive.setHex(0x000000);
                    region.scale.set(1, 1, 1);
                    if (region.userData.highlightInterval) {
                        clearInterval(region.userData.highlightInterval);
                        region.userData.highlightInterval = null;
                    }
                });
            } else {
                sliceControls.style.display = 'block';
                setupSliceView();
                // כשנכנסים למצב חתך, כל האזורים צריכים להיות שקופים (לפני ה"חיתוך" הספציפי)
                brainRegions.forEach(region => {
                     region.material.transparent = true; // ודא שקוף מוגדר ל-true
                     region.material.opacity = 0.8; // התחל עם השקיפות הסטנדרטית לפני יישום החתך
                });
                onSliceDepthChange({ target: { value: document.getElementById('sliceDepth').value } });
            }
        }

        function setupSliceView() {
            switch (currentViewMode) {
                case 'sagittal':
                    camera.position.set(5, 0, 0); // View from left/right
                    camera.lookAt(0, 0, 0);
                    break;
                case 'coronal':
                    camera.position.set(0, 0, 5); // View from front/back
                    camera.lookAt(0, 0, 0);
                    break;
                case 'axial':
                    camera.position.set(0, 5, 0); // View from top/bottom
                    camera.lookAt(0, 0, 0);
                    break;
            }
        }

        function onSliceDepthChange(event) {
            const depth = event.target.value;
            document.getElementById('sliceValue').textContent = depth;

            // Update slice plane based on current view mode
            brainRegions.forEach(region => {
                const normalizedDepth = (depth - 50) / 50; // -1 to 1

                // Adjust opacity based on distance from the slice plane
                let positionToCheck = 0; // The coordinate to check for slicing
                let slicePlaneNormal = new THREE.Vector3(); // Normal of the slicing plane

                switch (currentViewMode) {
                    case 'sagittal':
                        positionToCheck = region.position.x;
                        slicePlaneNormal.set(1, 0, 0); // Slice along X-axis
                        break;
                    case 'coronal':
                        positionToCheck = region.position.z;
                        slicePlaneNormal.set(0, 0, 1); // Slice along Z-axis
                        break;
                    case 'axial':
                        positionToCheck = region.position.y;
                        slicePlaneNormal.set(0, 1, 0); // Slice along Y-axis
                        break;
                }

                // Calculate distance from the current slice plane
                // The slice plane is at normalizedDepth relative to the brain's center (0,0,0)
                // For simplicity, let's just use the position of the region's center
                const distance = Math.abs(positionToCheck - normalizedDepth * 2); // Multiply by 2 for a larger range

                const maxDistance = 2.0; // Assuming brain extends roughly +/- 2 units
                const opacity = THREE.MathUtils.mapLinear(distance, 0, maxDistance, 0.8, 0.1); // Fade out with distance
                region.material.opacity = Math.max(0.1, opacity); // Ensure min opacity for visibility
            });
        }

        function onImageUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const texture = new THREE.TextureLoader().load(e.target.result);
                    const geometry = new THREE.PlaneGeometry(4, 4); // Larger plane for MRI
                    const material = new THREE.MeshBasicMaterial({ map: texture, transparent: true, opacity: 0.7, side: THREE.DoubleSide });

                    // Remove existing uploaded image
                    const existingImage = scene.getObjectByName('uploadedImage');
                    if (existingImage) {
                        scene.remove(existingImage);
                    }

                    const plane = new THREE.Mesh(geometry, material);
                    plane.name = 'uploadedImage';
                    plane.position.set(0, 0, -3); // Position it behind the brain model, further back
                    scene.add(plane);
                };
                reader.readAsDataURL(file);
            }
        }

        function displayRegionInfo(regionName) {
            const data = brainAnatomyData[regionName];
            const infoContainer = document.getElementById('regionInfo');

            infoContainer.innerHTML = `
                <div class="info-card">
                    <h3>${data.name}</h3>

                    <h4>תפקודים עיקריים:</h4>
                    <ul>
                        ${data.functions.map(func => `<li>${func}</li>`).join('')}
                    </ul>

                    <h4>השלכות של פגיעה באזור:</h4>
                    <ul>
                        ${data.damage.map(damage => `<li>${damage}</li>`).join('')}
                    </ul>

                    <h4>טיפים לשמירה על בריאות המוח:</h4>
                    <ul>
                        ${data.tips.map(tip => `<li>${tip}</li>`).join('')}
                    </ul>
                </div>
            `;
        }

        function highlightRegion(region) {
            // Reset all regions
            brainRegions.forEach(r => {
                r.material.emissive.setHex(0x000000);
                r.scale.set(1, 1, 1);
                // Clear any previous highlight animation
                if (r.userData.highlightInterval) {
                    clearInterval(r.userData.highlightInterval);
                    r.userData.highlightInterval = null;
                }
            });

            // Highlight selected region
            region.material.emissive.setHex(0x444444); // Subtle emission for highlight
            region.scale.set(1.1, 1.1, 1.1);

            // Animate highlight
            let scale = 1.1;
            let growing = true; // Start by growing
            const highlightAnimation = setInterval(() => {
                if (growing) {
                    scale += 0.01;
                    if (scale >= 1.2) growing = false;
                } else {
                    scale -= 0.01;
                    if (scale <= 1.1) growing = true;
                }
                region.scale.set(scale, scale, scale);
            }, 50); // Adjust speed of animation

            region.userData.highlightInterval = highlightAnimation; // Store interval to clear later
        }

        function resetView() {
            camera.position.set(0, 0, 5);
            camera.lookAt(0, 0, 0); // Ensure camera is looking at the center
            brain.rotation.set(0, 0, 0); // Reset brain rotation
            // Also reset view mode to 3D if it's not
            document.getElementById('viewMode').value = '3d';
            currentViewMode = '3d';
            document.getElementById('sliceControls').style.display = 'none';
            // Reset opacity of brain regions
            brainRegions.forEach(region => {
                region.material.opacity = 0.8;
                region.material.emissive.setHex(0x000000); // Clear highlight
                region.scale.set(1, 1, 1); // Reset scale
                if (region.userData.highlightInterval) {
                    clearInterval(region.userData.highlightInterval);
                    region.userData.highlightInterval = null;
                }
            });
            // Remove uploaded image if present
            const existingImage = scene.getObjectByName('uploadedImage');
            if (existingImage) {
                scene.remove(existingImage);
            }
             // Ensure animation is ON by default after reset (or off, based on preference)
            isAnimating = true;
            const toggleButton = document.querySelector('.control-group button:last-child');
            if (toggleButton) {
                toggleButton.textContent = 'הפסק סיבוב';
            }
        }

        function toggleAnimation() {
            isAnimating = !isAnimating;
            // Update button text (optional)
            const button = document.querySelector('.control-group button:last-child');
            if (button) {
                button.textContent = isAnimating ? 'הפסק סיבוב' : 'התחל סיבוב';
            }
        }

        function animate() {
            requestAnimationFrame(animate);

            if (isAnimating && currentViewMode === '3d') {
                brain.rotation.y += 0.005; // Rotate the brain
            }
            renderer.render(scene, camera);
        }

        // Initialize the application when the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>